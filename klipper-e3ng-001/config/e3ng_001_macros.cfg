[gcode_macro SMART_HOME]
description: Home the printer only if needed.
gcode:
  {% if printer.toolhead.homed_axes == "xyz" %}
    # Nothing to do
  {% else %}
    G28 # Home the printer
  {% endif %}

[gcode_macro SMART_LIFT]
description: Safely move the print head away from the print surface.
gcode:
  G90
  {% set lift_position = printer.toolhead.position.z + 5 | float %}
  {% if printer.toolhead.axis_maximum.z < lift_position %}
    {% set lift_position = printer.toolhead.axis_maximum.z %}
  {% endif %}
  G1 Z{lift_position} F600

[gcode_macro PARK_NOZZLE]
description: Park the nozzle.
gcode:
  SMART_LIFT
  {% set client_variable = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set park_x = client_variable.custom_park_x | float %}
  {% set park_y = client_variable.custom_park_y | float %}
  {% set park_feed_rate = (client_variable.custom_park_speed_mms * 60) | float %}
  # My Z-probes are mostly offset on the X-axis, and I use park positions that allow the probe
  #   to clear any poop bins/etc. if the nozzle is already parked at startup.
  # This movement pattern avoids passing my probes over the wipe pad and picking up filament boogers.
  G90
  G1 Y{(park_y-20)} F{park_feed_rate}
  G1 X{park_x} F{park_feed_rate}
  G1 X{park_x} Y{park_y} F{park_feed_rate}

[gcode_macro WIPE_NOZZLE]
description: Wipe the nozzle over a fixed cleaning brush or pad.
gcode:
  # Optional: Attempt to blow the boogers off with an air blast.
  #M106 S255
  #G4 P2000
  #M107
  # Wipe a squiggle on the pad
  {% set client_variable = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set wipe_start_x = client_variable.nozzle_wipe_start_x | float %}
  {% set wipe_start_y = client_variable.nozzle_wipe_start_y | float %}
  {% set wipe_movement_feed_rate = 600 | float %}
  G90
  # TODO: Throw some randomization in to reduce build-up in fixed areas of the pad.
  G1 X{wipe_start_x} Y{wipe_start_y} F{wipe_movement_feed_rate}
  #G1 X{(wipe_start_x + 4)}  Y{(wipe_start_y - 8)} F{wipe_movement_feed_rate}
  #G1 X{(wipe_start_x + 8)}  Y{(wipe_start_y + 8)} F{wipe_movement_feed_rate}
  #G1 X{(wipe_start_x + 12)} Y{(wipe_start_y - 8)} F{wipe_movement_feed_rate}
  G1 X214 Y238 F{wipe_movement_feed_rate}
  G1 X218 Y246 F{wipe_movement_feed_rate}
  G1 X226 Y238 F{wipe_movement_feed_rate}
  PARK_NOZZLE
  
# Slicer Start-GCODE example (OrcaSlicer in this case): 
#   START_PRINT BED_TEMP=[bed_temperature_initial_layer_single] EXTRUDER_TEMP=[nozzle_temperature_initial_layer] CHAMBER_TEMP=[chamber_temperature]
[gcode_macro START_PRINT]
description: Start a new print.
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set CHAMBER_PREHEAT_SECONDS = params.CHAMBER_PREHEAT_SECONDS|default(0)|float %}

  CLEAR_PAUSE
  # Use absolute coordinates
  G90
  # Extruder relative mode
  M83
  # Reset the G-Code Z offset (adjust Z offset if needed)
  SET_GCODE_OFFSET Z=0.0
  # Home the printer
  G28
  # Generate a bed mesh for the print area
  BED_MESH_CALIBRATE ADAPTIVE=1
  # Start bed heating (but don't wait for it)
  M140 S{BED_TEMP} 
  # Enable skew correction before the first time we move towards the bed edges
  #SKEW_PROFILE LOAD=calilantern_skew_profile_new_nozzle
  # Park the nozzle close to the bed while heating (KAMP macro)
  #SMART_PARK
  #G1 X115.3 Y115 Z50 F600
  PARK_NOZZLE
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  # Wipe the boogers before the purge
  WIPE_NOZZLE
  # Purge the nozzle
  LINE_PURGE
  #ORCA_PRIME

#[gcode_macro SPIRAL_RETRACT]
#gcode:
#  {% set Z_DISTANCE = params.Z_DISTANCE|default(0.6)|float %}
#  # Extruder retraction
#  G1 E-.4 F2400
#  G92 E0
#  # Spiral Z lift
#  G17
#  G3 Z{Z_DISTANCE} I1.217 J.031 P1  F9000

[gcode_macro END_PRINT]
description: End the current print job and return the printer to the ready state.
gcode:
  {% set AIR_FILTER_RUN_MINUTES = params.AIR_FILTER_RUN_MINUTES|default(20)|float %}
  {% if printer.extruder.target != 0 and printer.extruder.target <= printer.extruder.temperature %}
    # Retract filament from the nozzle if we're up to temperature.
    G92 E0
    G1 E-10 F600
  {% endif %}
  # Turn off bed, extruder, and fans
  M140 S0
  M104 S0
  M107
  # Move nozzle away from print
  {% set lift_position = printer.toolhead.position.z + 5 | float %}
  #{% if 100 > lift_position %}
  #  {% set lift_position = 100 %}
  #{% endif %}
  {% if printer.toolhead.axis_maximum.z < lift_position %}
    {% set lift_position = printer.toolhead.axis_maximum.z %}
  {% endif %}
  G1 Z{lift_position} F600
  # Present the print
  PARK_NOZZLE
  # Disable skew correction
  SET_SKEW CLEAR=1
  # Clear any loaded bed meshes
  BED_MESH_CLEAR
  # Disable steppers
  M84

# HACK: This E3NG's ceramic hotend heater is causing problems with Klipper's target temperature
#   smoothing logic. This can cause the printer to hang for 5-10 minutes when starting a print.
#   Attempts to tweak the smoothing durations and power settings haven't fixed this issue, but
#   this macro will bypass smoothing and start the print the moment the hotend hits the target temperature.
[gcode_macro M109]
rename_existing: M109.1
gcode:
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %} # Set hotend temp
    {% if s != 0 %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1} # Wait for hotend temp (within 1 degree)
    {% endif %}	
